// YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE
    // YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE
    // YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE YOUTUBE

    // SEARCH YOUTUBE FROM OMNIBOX > MAIN
    searchYoutube(event) {
        console.log('YouTube search triggered from the omnibox')
        event.preventDefault()
        this.setState({
            searchURL: this.state.youtube.URLstart + this.state.userQuery + this.state.youtube.URLend + this.state.youtube.apikey,
            // RESULTS WINDOW STATUS

        }, () => {
            fetch(this.state.searchURL)
                .then(response => response.json())
                .then(vids => this.setState(
                    {
                        youtubeResults: vids.items,
                        userQuery: ''
                    }), error => console.error(error))
        })
    }


    //////////////////////

        // PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS
    // PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS
    // PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS PODCASTS

    searchPodcasts(event) {
        console.log('Podcast search triggered from the omnibox')
        event.preventDefault()
        this.setState({
            searchURL: this.state.listenNotes.URLstart + this.state.listenNotes.userQuery + this.state.listenNotes.URLend
        }, () => {
            fetch(this.state.searchURL, {
                headers: {
                    'X-ListenAPI-Key': '6e0d87eb4b284e659faa4ccfb8082cc6'
                }
            })
                .then(response => response.json())
                .then(casts => this.setState(
                    {
                        podcastResults: casts.response.items,
                        userQuery: ''
                    }), error => console.error(error))
        })
    }